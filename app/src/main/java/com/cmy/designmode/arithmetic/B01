算法
说明:
    Stragety(抽象策略类)：抽象类或接口，提供具体策略类需要实现的接口。
    ConcreteStragetyA、ConcreteStragetyB（具体策略类）：具体的策略实现，封装了相关的算法实现。
    Context（环境类）：用来操作策略的上下文环境
    eg.............

    1.应用场景
   同一个问题具有不同算法时，即仅仅是具体的实现细节不同时，如各种排序算法等等。
   对客户隐藏具体策略(算法)的实现细节，彼此完全独立；提高算法的保密性与安全性。
   一个类拥有很多行为，而又需要使用if-else或者switch语句来选择具体行为时。使用策略模式把这些行为独立到具体的策略类中，可以避免多重选择的结构。

    2.优点
    策略类可以互相替换
    由于策略类都实现同一个接口，因此他们能够互相替换。
    耦合度低，方便扩展
    增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码，符合开闭原则。
    避免使用多重条件选择语句（if-else或者switch）。
    3.缺点
    策略的增多会导致子类的也会变多
    客户端必须知道所有的策略类，并自行决定使用哪一个策略类

1.工厂模式
      new FactoryA().createProduct().method();


